APEX CODING


// ---0. Mathematical Scientific Calculator with UI
//Calc.apxc

public class Calc {
    public Double firstnumber { get; set; }
    public Double secondnumber { get; set; }
    public String result { get; set; }  // Changed type from Double to String
    public String operationName { get; set; }

    public List<String> history { get; set; }

    public Calc() {
        history = new List<String>();
    }

    private void log(String opName, String message) {
        operationName = opName;
        if (result != null)
            history.add(message + ' = ' + result);
        else
            history.add(message + ' = Invalid');
    }

    public void Addition() {
        result = String.valueOf(firstnumber + secondnumber);
        log('Addition', 'Addition of ' + firstnumber + ' and ' + secondnumber);
    }

    public void Subtraction() {
        result = String.valueOf(firstnumber - secondnumber);
        log('Subtraction', 'Subtraction of ' + firstnumber + ' and ' + secondnumber);
    }

    public void Multiplication() {
        result = String.valueOf(firstnumber * secondnumber);
        log('Multiplication', 'Multiplication of ' + firstnumber + ' and ' + secondnumber);
    }

    public void Division() {
        if (secondnumber != 0) {
            result = String.valueOf(firstnumber / secondnumber);
        } else {
            result = 'Cannot divide by zero';
        }
        log('Division', 'Division of ' + firstnumber + ' by ' + secondnumber);
    }

    public void Modulus() {
        result = String.valueOf(Math.mod(firstnumber.intValue(), secondnumber.intValue()));
        log('Modulus', 'Modulus of ' + firstnumber + ' % ' + secondnumber);
    }

    public void power() {
        result = String.valueOf(Math.pow(firstnumber, secondnumber));
        log('Power', firstnumber + ' ^ ' + secondnumber);
    }

    public void square_root1() {
        result = String.valueOf(Math.sqrt(firstnumber));
        log('Square Root', 'Square root of ' + firstnumber);
    }

    public void square_root2() {
        result = String.valueOf(Math.sqrt(secondnumber));
        log('Square Root', 'Square root of ' + secondnumber);
    }

    public void square1() {
        result = String.valueOf(firstnumber * firstnumber);
        log('Square', 'Square of ' + firstnumber);
    }

    public void square2() {
        result = String.valueOf(secondnumber * secondnumber);
        log('Square', 'Square of ' + secondnumber);
    }

    public void sine1() {
        result = String.valueOf(Math.sin(firstnumber * Math.PI / 180));
        log('Sine', 'Sine of ' + firstnumber + '°');
    }

    public void sine2() {
        result = String.valueOf(Math.sin(secondnumber * Math.PI / 180));
        log('Sine', 'Sine of ' + secondnumber + '°');
    }

    public void cosine1() {
        result = String.valueOf(Math.cos(firstnumber * Math.PI / 180));
        log('Cosine', 'Cosine of ' + firstnumber + '°');
    }

    public void cosine2() {
        result = String.valueOf(Math.cos(secondnumber * Math.PI / 180));
        log('Cosine', 'Cosine of ' + secondnumber + '°');
    }

    public void tangent1() {
        result = String.valueOf(Math.tan(firstnumber * Math.PI / 180));
        log('Tangent', 'Tangent of ' + firstnumber + '°');
    }

    public void tangent2() {
        result = String.valueOf(Math.tan(secondnumber * Math.PI / 180));
        log('Tangent', 'Tangent of ' + secondnumber + '°');
    }

    public void log1() {
        result = (firstnumber > 0) ? String.valueOf(Math.log(firstnumber) / Math.log(10)) : null;
        log('Log', 'Log base 10 of ' + firstnumber);
    }

    public void log2() {
        result = (secondnumber > 0) ? String.valueOf(Math.log(secondnumber) / Math.log(10)) : null;
        log('Log', 'Log base 10 of ' + secondnumber);
    }

    public void ln1() {
        result = (firstnumber > 0) ? String.valueOf(Math.log(firstnumber)) : null;
        log('Ln', 'Ln of ' + firstnumber);
    }

    public void ln2() {
        result = (secondnumber > 0) ? String.valueOf(Math.log(secondnumber)) : null;
        log('Ln', 'Ln of ' + secondnumber);
    }

    public void exp1() {
        result = String.valueOf(Math.exp(firstnumber));
        log('Exponential', 'e^' + firstnumber);
    }

    public void exp2() {
        result = String.valueOf(Math.exp(secondnumber));
        log('Exponential', 'e^' + secondnumber);
    }

    public void abs1() {
        result = String.valueOf(Math.abs(firstnumber));
        log('Absolute', 'Absolute of ' + firstnumber);
    }

    public void abs2() {
        result = String.valueOf(Math.abs(secondnumber));
        log('Absolute', 'Absolute of ' + secondnumber);
    }

    public void reset() {
        firstnumber = null;
        secondnumber = null;
        result = null;
        operationName = null;
        history.clear();
    }
}


//Calc.vfp


<apex:page controller="Calc">
    <apex:form id="form">
        <apex:pageBlock title="Simple Calculator" >

            <!-- Input Fields -->
            <apex:pageBlockSection columns="2" title="Inputs">
                <apex:inputText label="First Number" value="{!firstnumber}" />
                <apex:inputText label="Second Number" value="{!secondnumber}" />
            </apex:pageBlockSection>

            <!-- Result Display -->
            <apex:pageBlockSection columns="1">
                <apex:outputLabel value="Result:" />
                <apex:outputPanel style="border:1px solid #ddd; padding:10px; width:200px; background:#f9f9f9; font-size:16px; font-weight:bold;">
                    <apex:outputText value="{!result}" 
                        style="color:{!IF(result='Cannot divide by zero','red','black')};" />
                </apex:outputPanel>
            </apex:pageBlockSection>

            <!-- Buttons Row -->
            <div style="display:flex; flex-wrap:wrap; gap:5px; margin-top:10px;">
                <apex:commandButton value="+" action="{!Addition}" reRender="form" />
                <apex:commandButton value="-" action="{!Subtraction}" reRender="form" />
                <apex:commandButton value="*" action="{!Multiplication}" reRender="form" />
                <apex:commandButton value="/" action="{!Division}" reRender="form" />
                <apex:commandButton value="%" action="{!Modulus}" reRender="form" />
                <apex:commandButton value="^" action="{!power}" reRender="form" />
                <apex:commandButton value="Sq1" action="{!square1}" reRender="form" />
                <apex:commandButton value="Sq2" action="{!square2}" reRender="form" />
                <apex:commandButton value="√1" action="{!square_root1}" reRender="form" />
                <apex:commandButton value="√2" action="{!square_root2}" reRender="form" />
                <apex:commandButton value="sin1" action="{!sine1}" reRender="form" />
                <apex:commandButton value="sin2" action="{!sine2}" reRender="form" />
                <apex:commandButton value="cos1" action="{!cosine1}" reRender="form" />
                <apex:commandButton value="cos2" action="{!cosine2}" reRender="form" />
                <apex:commandButton value="tan1" action="{!tangent1}" reRender="form" />
                <apex:commandButton value="tan2" action="{!tangent2}" reRender="form" />
                <apex:commandButton value="log1" action="{!log1}" reRender="form" />
                <apex:commandButton value="log2" action="{!log2}" reRender="form" />
                <apex:commandButton value="ln1" action="{!ln1}" reRender="form" />
                <apex:commandButton value="ln2" action="{!ln2}" reRender="form" />
                <apex:commandButton value="e¹" action="{!exp1}" reRender="form" />
                <apex:commandButton value="e²" action="{!exp2}" reRender="form" />
                <apex:commandButton value="|1|" action="{!abs1}" reRender="form" />
                <apex:commandButton value="|2|" action="{!abs2}" reRender="form" />
                <apex:commandButton value="Reset" action="{!reset}" reRender="form" />
            </div>

        </apex:pageBlock>
    </apex:form>
</apex:page>







// --- 1. Mathematical Scientific Calculator without UI
public class Calci {
    public static Decimal add(Decimal num1, Decimal num2) {
        return num1 + num2;
    }
    
    public static Decimal subtract(Decimal num1, Decimal num2) {
        return num1 - num2;
    }

    public static Decimal multiply(Decimal num1, Decimal num2) {
        return num1 * num2;
    }

    public static Decimal divide(Decimal num1, Decimal num2) {
        if (num2 == 0) {
            System.debug('Error: Division by zero.');
            return null;
        }
        return num1 / num2;
    }

    public static Decimal modulus(Decimal num1, Decimal num2) {
        if (num2 == 0) {
            System.debug('Error: Modulus by zero is undefined.');
            return null;
        }
        return num1 - (Math.floor(num1 / num2) * num2);
    }

    public static Decimal power(Decimal base, Decimal exponent) {
        return (Decimal)Math.pow((Double)base, (Double)exponent);
    }

    public static Decimal squareRoot(Decimal num) {
        if (num < 0) {
            System.debug('Error: Negative number cannot have a real square root.');
            return null;
        }
        return (Decimal)Math.sqrt((Double)num);
    }

    public static Decimal sine(Decimal angleInDegrees) {
        Decimal angleInRadians = angleInDegrees * Math.PI / 180;
        return (Decimal)Math.sin((Double)angleInRadians);
    }

    public static Decimal cosine(Decimal angleInDegrees) {
        Decimal angleInRadians = angleInDegrees * Math.PI / 180;
        return (Decimal)Math.cos((Double)angleInRadians);
    }

    public static Decimal tangent(Decimal angleInDegrees) {
        Decimal angleInRadians = angleInDegrees * Math.PI / 180;
        return (Decimal)Math.tan((Double)angleInRadians);
    }

    public static Decimal logarithm(Decimal num) {
        if (num <= 0) {
            System.debug('Error: Logarithm defined only for positive numbers.');
            return null;
        }
        return (Decimal)(Math.log((Double)num) / Math.log(10));
    }

    public static Decimal naturalLogarithm(Decimal num) {
        if (num <= 0) {
            System.debug('Error: Natural logarithm defined only for positive numbers.');
            return null;
        }
        return (Decimal)Math.log((Double)num);
    }

    public static Decimal absolute(Decimal num) {
        return (Decimal)Math.abs((Double)num);
    }

    public static Decimal exponential(Decimal num) {
        return (Decimal)Math.exp((Double)num);
    }

    public static void calculate(Decimal num1, Decimal num2) {
        System.debug('Addition: ' + add(num1, num2));
        System.debug('Subtraction: ' + subtract(num1, num2));
        System.debug('Multiplication: ' + multiply(num1, num2));
        System.debug('Division: ' + divide(num1, num2));
        System.debug('Modulus: ' + modulus(num1, num2));  // Testing modulus
        System.debug('Power: ' + power(num1, num2));
        System.debug('Square Root of ' + num1 + ': ' + squareRoot(num1));
        System.debug('Sine of 30 degrees: ' + sine(30));
        System.debug('Cosine of 45 degrees: ' + cosine(45));
        System.debug('Tangent of 60 degrees: ' + tangent(60));
        System.debug('Logarithm of 100: ' + logarithm(100));
        System.debug('Natural Logarithm of 10: ' + naturalLogarithm(10));
        System.debug('Absolute value of -15: ' + absolute(-15));
        System.debug('Exponential of 2: ' + exponential(2));
    }
}


// Anonymous Window
// Accepting two numbers from the user
Decimal num1 = 15;  // Replace with your desired value
Decimal num2 = 5;   // Replace with your desired value

// Calling the calculate method
Calci.calculate(num1, num2);








// --- 2. Generate Student Mark Sheet
public class Marksheet {
    public void generate(String name, Integer[] marks) {
        if (String.isBlank(name)) {
            System.debug('Student name is required.');
            return;
        }

        if (marks == null || marks.isEmpty()) {
            System.debug('Marks data is missing for ' + name + '.');
            return;
        }

        Integer total = 0;
        for (Integer mark : marks) {
            if (mark != null) total += mark;
        }

        Double percentage = total / (Double) marks.size();
        String grade;

        if (percentage >= 90) grade = 'A+';
        else if (percentage >= 80) grade = 'A';
        else if (percentage >= 70) grade = 'B';
        else if (percentage >= 60) grade = 'C';
        else if (percentage >= 50) grade = 'D';
        else grade = 'F';

        System.debug('--- Marksheet ---');
        System.debug('Student Name : ' + name);
        System.debug('Subjects      : ' + marks.size());
        System.debug('Total Marks   : ' + total);
        System.debug('Percentage    : ' + percentage + '%');
        System.debug('Grade         : ' + grade);
        System.debug('----------------');
    }
}


// To execute in Anonymous Window:
Marksheet ms = new Marksheet();
ms.generate('John Doe', new Integer[]{85, 90, 78, 92});



// --- 3. Greatest Among Three Numbers
public class Maximum {
    public void compare(Integer x, Integer y, Integer z) {
        if (x == null || y == null || z == null) {
            System.debug('Error: One or more input values are null.');
            return;
        }
        if (x == y && y == z) {
            System.debug(x + ' is the greatest number (All numbers are equal)');
        } else if (x > y && x > z) {
            System.debug(x + ' is the greatest number');
        } else if (y > x && y > z) {
            System.debug(y + ' is the greatest number');
        } else {
            System.debug(z + ' is the greatest number');
        }
    }
}


// To execute in Anonymous Window:
Maximum m = new Maximum();
m.compare(5, 9, 3); // Example to test




// --- 4. Electricity Bill Calculator
public class ElectricityBill {
    public void calculateBill(Integer units) {
        if (units == null || units < 0) {
            System.debug('Error: Invalid input. Units cannot be null or negative.');
            return;
        }

        Double bill = 0.0;

        if (units <= 100) {
            bill = units * 5.0;
        } else if (units <= 200) {
            bill = (100 * 5.0) + ((units - 100) * 7.5);
        } else {
            bill = (100 * 5.0) + (100 * 7.5) + ((units - 200) * 10.0);
        }

        System.debug('Units Consumed: ' + units);
        System.debug('Total Bill: ₹' + String.valueOf(((Decimal)bill).setScale(2)));
    }
}

// To execute in Anonymous Window:
ElectricityBill eb = new ElectricityBill();
eb.calculateBill(150); // Example of 150 units consumed




// --- 5. Celsius to Fahrenheit Conversion
public class TemperatureConverter {

    // Method to convert Celsius to Fahrenheit
    public static Decimal celsiusToFahrenheit(Decimal celsius) {
        Decimal fahrenheit = (celsius * 9 / 5) + 32;
        return fahrenheit;
    }

    // Method to convert Fahrenheit to Celsius
    public static Decimal fahrenheitToCelsius(Decimal fahrenheit) {
        Decimal celsius = (fahrenheit - 32) * 5 / 9;
        return celsius;
    }

    // Method to accept user input and perform the conversion
    public static void convertTemperature(Decimal inputTemperature, String conversionType) {
        if(conversionType == 'CtoF') {
            Decimal result = celsiusToFahrenheit(inputTemperature);
            System.debug(inputTemperature + '°C is equal to ' + result + '°F');
        } else if(conversionType == 'FtoC') {
            Decimal result = fahrenheitToCelsius(inputTemperature);
            System.debug(inputTemperature + '°F is equal to ' + result + '°C');
        } else {
            System.debug('Error: Invalid conversion type. Use "CtoF" or "FtoC".');
        }
    }
}

// Anonymous Window
Decimal inputTemperature = 25; // Change this value for the temperature you want to convert
String conversionType = 'CtoF'; // Use 'CtoF' for Celsius to Fahrenheit, 'FtoC' for Fahrenheit to Celsius

TemperatureConverter.convertTemperature(inputTemperature, conversionType);







// --- 6. Currency Converter
public class CurrencyConverter {
    
    private static final Map<String, Map<String, Double>> conversionRates = new Map<String, Map<String, Double>>{
        'INR' => new Map<String, Double>{
            'USD' => 0.012,
            'Pound' => 0.0096
        },
        'USD' => new Map<String, Double>{
            'INR' => 83.38,
            'Pound' => 0.80
        },
        'Pound' => new Map<String, Double>{
            'INR' => 104.63,
            'USD' => 1.25
        }
    };

    public void convertCurrency(String fromCurrency, String toCurrency, Double amount) {
        if (fromCurrency == null || toCurrency == null || amount == null || amount < 0) {
            System.debug('Invalid input. Please check your values.');
            return;
        }

        if (fromCurrency == toCurrency) {
            System.debug('The currencies are the same: ' + fromCurrency);
            return;
        }

        if (conversionRates.containsKey(fromCurrency) && conversionRates.get(fromCurrency).containsKey(toCurrency)) {
            Double rate = conversionRates.get(fromCurrency).get(toCurrency);
            Double convertedAmount = amount * rate;
            System.debug(amount + ' ' + fromCurrency + ' = ' + convertedAmount + ' ' + toCurrency);
        } else {
            System.debug('Conversion rate not available for ' + fromCurrency + ' to ' + toCurrency);
        }
    }
}


// To execute in Anonymous Window:
// Convert 1000 INR to USD
CurrencyConverter cc = new CurrencyConverter();
cc.convertCurrency('INR', 'USD', 1000);
cc.convertCurrency('USD', 'INR', 50);
cc.convertCurrency('USD', 'Pound', 25);




// --- 7. Compound Interest
public class CompoundInterest {
    public class Result {
        public Decimal principal;
        public Decimal rate;
        public Integer duration;
        public Integer frequency;  // Only for compound interest
        public Decimal interest;
        public Decimal totalAmount;
        public String type; // "Simple" or "Compound"
    }

    public Result calculateCompound(Decimal p, Decimal r, Integer t, Integer n) {
        Result res = new Result();

        if (p == null || r == null || t == null || n == null || p < 0 || r < 0 || t < 0 || n <= 0) {
            System.debug('Error: Invalid input values.');
            return null;
        }

        Decimal base = 1 + (r / (100 * n));
        Decimal exponent = n * t;
        Decimal amount = p * (Decimal)Math.pow((Double)base, (Double)exponent);
        Decimal ci = amount - p;

        res.principal = p;
        res.rate = r;
        res.duration = t;
        res.frequency = n;
        res.interest = ci.setScale(2);
        res.totalAmount = amount.setScale(2);
        res.type = 'Compound';

        System.debug('=== Compound Interest ===');
        System.debug('Principal: ₹' + p);
        System.debug('Annual Interest Rate: ' + r + '%');
        System.debug('Time Period: ' + t + ' years');
        System.debug('Compounded ' + n + ' times per year');
        System.debug('Compound Interest: ₹' + res.interest);
        System.debug('Total Amount: ₹' + res.totalAmount);

        return res;
    }

    public Result calculateSimple(Decimal p, Decimal r, Integer t) {
        Result res = new Result();

        if (p == null || r == null || t == null || p < 0 || r < 0 || t < 0) {
            System.debug('Error: Invalid input values.');
            return null;
        }

        Decimal si = (p * r * t) / 100;
        Decimal amount = p + si;

        res.principal = p;
        res.rate = r;
        res.duration = t;
        res.frequency = null; // Not applicable for simple interest
        res.interest = si.setScale(2);
        res.totalAmount = amount.setScale(2);
        res.type = 'Simple';

        System.debug('=== Simple Interest ===');
        System.debug('Principal: ₹' + p);
        System.debug('Annual Interest Rate: ' + r + '%');
        System.debug('Time Period: ' + t + ' years');
        System.debug('Simple Interest: ₹' + res.interest);
        System.debug('Total Amount: ₹' + res.totalAmount);

        return res;
    }
}





// To execute in Anonymous Window:
CompoundInterest ci = new CompoundInterest();

// Compound Interest: principal = 5000, rate = 5.5%, time = 3 years, frequency = 4 (quarterly)
CompoundInterest.Result compoundRes = ci.calculateCompound(5000, 5.5, 3, 4);

// Simple Interest: principal = 5000, rate = 5.5%, time = 3 years
CompoundInterest.Result simpleRes = ci.calculateSimple(5000, 5.5, 3);





// --- 8. Area of Geometry
public class GeometryArea {
    public void calculateCircleArea(Decimal radius) {
        if (radius == null || radius < 0) {
            System.debug('Error: Radius cannot be null or negative.');
            return;
        }
        Decimal area = Math.PI * radius * radius;
        System.debug('Area of Circle: ' + area);
    }

    public void calculateRectangleArea(Decimal length, Decimal width) {
        if (length == null || width == null || length < 0 || width < 0) {
            System.debug('Error: Length and width must be non-negative.');
            return;
        }
        Decimal area = length * width;
        System.debug('Area of Rectangle: ' + area);
    }

    public void calculateTriangleArea(Decimal base, Decimal height) {
        if (base == null || height == null || base < 0 || height < 0) {
            System.debug('Error: Base and height must be non-negative.');
            return;
        }
        Decimal area = 0.5 * base * height;
        System.debug('Area of Triangle: ' + area);
    }

    public void calculateSquareArea(Decimal side) {
        if (side == null || side < 0) {
            System.debug('Error: Side must be non-negative.');
            return;
        }
        Decimal area = side * side;
        System.debug('Area of Square: ' + area);
    }
}




// To execute in Anonymous Window:
GeometryArea g = new GeometryArea();
g.calculateCircleArea(5.0);
g.calculateRectangleArea(4.0, 3.0);
g.calculateTriangleArea(6.0, 2.5);
g.calculateSquareArea(7.0);




// --- 10. Array Element Addition
public class ArraySum {
    public void sumArray(List<Integer> arr) {
        Integer sum = 0;
        
        for (Integer i = 0; i < arr.size(); i++) {
            sum += arr[i];
        }
        
        System.debug('Sum of all elements: ' + sum);
    }
}



// To execute in Anonymous Window:
ArraySum sumObj = new ArraySum();
List<Integer> arr = new List<Integer>{1, 2, 3, 4, 5};
sumObj.sumArray(arr);



// --- 11. Matrix Addition
public class MatrixAddition {
    public void addMatrices(List<List<Integer>> mat1, List<List<Integer>> mat2) {
        // Check if matrices have the same size
        if (mat1.size() != mat2.size() || mat1[0].size() != mat2[0].size()) {
            System.debug('Matrices must be of the same size');
            return;
        }

        List<List<Integer>> result = new List<List<Integer>>();

        // Perform addition of corresponding elements
        for (Integer i = 0; i < mat1.size(); i++) {
            List<Integer> row = new List<Integer>();
            for (Integer j = 0; j < mat1[i].size(); j++) {
                row.add(mat1[i][j] + mat2[i][j]);
            }
            result.add(row);
        }

        // Output the resulting matrix
        System.debug('Resulting Matrix: ' + result);
    }
}



// To execute in Anonymous Window:
MatrixAddition matrixAdd = new MatrixAddition();
List<List<Integer>> mat1 = new List<List<Integer>>{ 
    new List<Integer>{1, 2}, 
    new List<Integer>{3, 4}
};
List<List<Integer>> mat2 = new List<List<Integer>>{ 
    new List<Integer>{5, 6}, 
    new List<Integer>{7, 8}
};
matrixAdd.addMatrices(mat1, mat2);




// --- 12. Matrix Multiplication
public class MatrixMultiplication {
    public void multiplyMatrices(List<List<Integer>> mat1, List<List<Integer>> mat2) {
        // Check if the number of columns in mat1 equals the number of rows in mat2
        if (mat1[0].size() != mat2.size()) {
            System.debug('Number of columns in mat1 must be equal to number of rows in mat2');
            return;
        }

        // Initialize the result matrix with appropriate size
        List<List<Integer>> result = new List<List<Integer>>();
        for (Integer i = 0; i < mat1.size(); i++) {
            List<Integer> row = new List<Integer>();
            for (Integer j = 0; j < mat2[0].size(); j++) {
                row.add(0); // Initialize the row with zeros
            }
            result.add(row);
        }

        // Perform matrix multiplication
        for (Integer i = 0; i < mat1.size(); i++) {
            for (Integer j = 0; j < mat2[0].size(); j++) {
                for (Integer k = 0; k < mat2.size(); k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }

        // Output the result matrix
        System.debug('Resulting Matrix: ');
        for (List<Integer> row : result) {
            System.debug(row);
        }
    }
}


// To execute in Anonymous Window:
MatrixMultiplication mm = new MatrixMultiplication();
List<List<Integer>> mat1 = new List<List<Integer>>{ 
    new List<Integer>{1, 2}, 
    new List<Integer>{3, 4}
};
List<List<Integer>> mat2 = new List<List<Integer>>{ 
    new List<Integer>{5, 6}, 
    new List<Integer>{7, 8}
};
mm.multiplyMatrices(mat1, mat2);




// --- 13. First 100 Natural Numbers
public class NaturalNumbers {
    public void printNaturalNumbers() {
        for (Integer i = 1; i <= 100; i++) {
            System.debug(i);
        }
    }
}



// To execute in Anonymous Window:
NaturalNumbers naturalNumbersObj = new NaturalNumbers();
naturalNumbersObj.printNaturalNumbers();



// --- 14. Fibonacci Series
public class Fibonacci {
    public void generate(Integer n) {
        if (n <= 0) {
            System.debug('Please provide a positive number.');
            return;
        }

        Integer a = 0, b = 1;
        
        // Handle the first number
        if (n >= 1) System.debug(a);
        // Handle the second number
        if (n >= 2) System.debug(b);
        
        // Generate Fibonacci numbers from the 3rd number onward
        for (Integer i = 2; i < n; i++) {
            Integer next = a + b;
            System.debug(next);
            a = b;
            b = next;
        }
    }
}


// To execute in Anonymous Window:
Fibonacci fib = new Fibonacci();
fib.generate(10);




// --- 15. Prime Check
public class PrimeChecker {
    public static void checkPrime(Integer num) {
        if (num == null || num <= 1) {
            System.debug(num + ' is not a prime number.');
            return;
        }

        Double sqrtVal = Math.sqrt(Double.valueOf(num));
        Integer limitVal = Integer.valueOf(Math.floor(sqrtVal));

        for (Integer i = 2; i <= limitVal; i++) {
            if (Math.mod(num, i) == 0) {
                System.debug(num + ' is not a prime number.');
                return;
            }
        }

        System.debug(num + ' is a prime number.');
    }
}



// To execute in Anonymous Window:
PrimeChecker.checkPrime(17);
PrimeChecker.checkPrime(20);
