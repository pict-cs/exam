def prompt_int(message, min_val=1, max_val=10):
    while True:
        try:
            val = int(input(message))
            if min_val <= val <= max_val:
                return val
        except ValueError:
            pass
        print(f"Please enter an integer between {min_val} and {max_val}.")

def prompt_yes_no(message):
    while True:
        ans = input(message + " (yes/no): ").strip().lower()
        if ans in ("yes", "no"):
            return ans == "yes"
        print("Please answer 'yes' or 'no'.")

def evaluate_performance(name, rank):
    print(f"\n--- Performance Evaluation for {name} ({rank}) ---")
    punctuality    = prompt_int("Rate punctuality (1‚Äì10): ")
    work_quality   = prompt_int("Rate work quality (1‚Äì10): ")
    teamwork       = prompt_int("Rate teamwork (1‚Äì10): ")
    leadership     = prompt_int("Rate leadership skills (1‚Äì10): ")
    target_met     = prompt_yes_no("Have they met their annual targets?")
    years_exp      = prompt_int("Years of experience in this role: ", 0, 50)
    last_training  = prompt_int("Years since last formal training: ", 0, 10)

    scores = [punctuality, work_quality, teamwork, leadership]
    overall = sum(scores) / len(scores)
    print(f"\nOverall Score: {overall:.2f}/10")

    # Expert commentary
    if overall >= 8 and target_met:
        print("Expert: Outstanding performance! üéâ")
        print("Recommendation: Consider them for a leadership stretch assignment or bonus review.")
    elif overall >= 6:
        print("Expert: Solid performance with room for growth.")
        # Point out weakest area
        weakest = ["Punctuality", "Work Quality", "Teamwork", "Leadership"][scores.index(min(scores))]
        print(f"Observation: {weakest} is the lowest-rated skill.")
        print("Recommendation:")
        if weakest == "Leadership":
            print(" - Enroll in a mentoring program to build leadership confidence.")
        elif weakest == "Teamwork":
            print(" - Pair with a senior peer on a cross‚Äëfunctional project.")
        else:
            print(" - Schedule targeted workshops or weekly one‚Äëon‚Äëone coaching.")
    else:
        print("Expert: Performance needs improvement. üöß")
        print("Recommendation:")
        print(" - Set up a performance improvement plan (PIP) with clear milestones.")
        print(" - Arrange a refresher training in weak areas.")
        print(" - Schedule bi‚Äëweekly check‚Äëins to track progress.")
    
    # Training recency
    if last_training > 2:
        print("Note: It‚Äôs been over two years since their last training. Consider an update.")

def suggest_training():
    print("\n--- Training Recommendation ---")
    area = input("Area to improve (Leadership / Technical / Communication): ").strip().lower()
    mapping = {
        "leadership":    "Leadership & Management Workshop",
        "technical":     "Advanced Technical Skills Bootcamp",
        "communication": "Effective Communication Seminar"
    }
    print("Expert: Recommended program ‚Üí", mapping.get(area, "General Professional Development"))

def calculate_bonus(name, rank):
    print(f"\n--- Bonus Calculation for {name} ({rank}) ---")
    base = float(input("Enter base salary (INR): "))
    perf = float(input("Enter final performance score (1‚Äì10): "))
    mult = {"Intern": .05, "Junior Developer": .1, "Senior Developer": .15,
            "Manager": .2, "Director": .25}.get(rank, .1)
    bonus = (perf / 10) * base * mult
    print(f"Expert: Estimated bonus = INR {bonus:.2f}")

def promotion_eligibility(name, rank):
    print(f"\n--- Promotion Eligibility for {name} ({rank}) ---")
    yrs = int(input("Years of experience: "))
    since_promo = int(input("Years since last promotion: "))
    perf = float(input("Average performance score (1‚Äì10): "))
    if perf >= 8 and yrs > 3 and since_promo > 2:
        print("Expert: Eligible for promotion consideration! ‚úÖ")
    else:
        print("Expert: Not yet eligible. Focus on these areas:")
        print(" - Increase impact on key projects.")
        print(" - Seek stretch assignments to broaden skills.")

def work_life_balance(name):
    print(f"\n--- Work‚ÄëLife Balance Check for {name} ---")
    hours = int(input("Average weekly hours: "))
    if hours > 50:
        print("Expert: High workload detected! ‚ö†Ô∏è")
        print("Suggestion: Redistribute tasks or cap weekly hours to 45.")
    else:
        print("Expert: Healthy balance üëç")

def employee_evaluation_system():
    print("Welcome to the Enhanced Employee Performance Evaluation System\n")
    ranks = ["Intern", "Junior Developer", "Senior Developer", "Manager", "Director"]
    while True:
        cmd = input("You: ").strip().lower()
        if cmd in ("hi", "hello"):
            print("Expert: Hi there! What would you like to do today?")
        elif cmd in ("bye", "exit"):
            print("Expert: Goodbye! Stay productive.")
            break
        elif "evaluate" in cmd or "performance review" in cmd:
            evaluator = input("Your rank (Managers only): ").strip().title()
            if evaluator != "Manager":
                print("Expert: Sorry, only Managers can perform evaluations.")
                continue
            name = input("Employee name: ").strip().title()
            rank = input(f"Rank ({', '.join(ranks)}): ").strip().title()
            if rank not in ranks or rank == "Manager":
                print("Expert: Invalid rank.")
                continue
            evaluate_performance(name, rank)
        elif "suggest training" in cmd or "training program" in cmd:
            suggest_training()
        elif "calculate bonus" in cmd:
            name = input("Employee name: ").strip().title()
            rank = input(f"Rank ({', '.join(ranks)}): ").strip().title()
            calculate_bonus(name, rank)
        elif "promotion eligibility" in cmd:
            name = input("Employee name: ").strip().title()
            rank = input(f"Rank ({', '.join(ranks)}): ").strip().title()
            promotion_eligibility(name, rank)
        elif "work-life balance" in cmd:
            name = input("Employee name: ").strip().title()
            work_life_balance(name)
        else:
            print("Expert: I didn't understand that. You can ask me to evaluate, suggest training, calculate bonus, check promotion eligibility, or assess work‚Äëlife balance.")
            
if __name__ == "__main__":
    employee_evaluation_system()
















### library

import random

# Expert knowledge base
library_expert_knowledge = {
    'AI': {
        'Image recognition': {
            'recommendation': 'For your Image Recognition project, I highly recommend using Convolutional Neural Networks (CNNs). CNNs are particularly effective for tasks involving images, as they automatically learn spatial hierarchies of features.',
            'books': [
                '‚ÄúDeep Learning‚Äù by Ian Goodfellow',
                '‚ÄúPattern Recognition and Machine Learning‚Äù by Christopher Bishop'
            ],
            'papers': [
                '‚ÄúImageNet Classification with Deep Convolutional Neural Networks‚Äù by Krizhevsky et al.',
                '‚ÄúVery Deep Convolutional Networks for Large-Scale Image Recognition‚Äù by Simonyan and Zisserman'
            ]
        },
        'Chatbot': {
            'recommendation': 'For building an efficient chatbot, I suggest using transformer-based models such as GPT or BERT, as they offer state-of-the-art performance in language understanding. You might also want to look into reinforcement learning techniques for improving conversations over time.',
            'books': [
                '‚ÄúNatural Language Processing with Python‚Äù by Bird, Klein, Loper',
                '‚ÄúSpeech and Language Processing‚Äù by Jurafsky and Martin'
            ],
            'papers': [
                '‚ÄúAttention Is All You Need‚Äù by Vaswani et al.',
                '‚ÄúTransferTransfo: A Transfer Learning Approach for Neural Network Based Conversational Agents‚Äù by Wolf et al.'
            ]
        }
    },
    'Web Development': {
        'E-commerce site': {
            'recommendation': 'For an E-commerce site, I suggest you use a robust front-end framework like React or Angular. On the backend, a Node.js and MongoDB combination would be great for scalability. Don‚Äôt forget about user authentication and payment gateways for a smooth shopping experience!',
            'books': [
                '‚ÄúEloquent JavaScript‚Äù by Marijn Haverbeke',
                '‚ÄúYou Don‚Äôt Know JS‚Äù series by Kyle Simpson'
            ],
            'papers': [
                '‚ÄúA Framework for Web Application Development‚Äù by Garzotto et al.',
                '‚ÄúScalable Web Architectures‚Äù by James Hamilton'
            ]
        },
        'Real-time chat app': {
            'recommendation': 'For a real-time chat application, I recommend using WebSockets or Socket.IO for bidirectional communication. These technologies ensure low latency and efficient message handling. Additionally, consider storing messages in a database with timestamps for easy retrieval.',
            'books': [
                '‚ÄúNode.js Design Patterns‚Äù by Mario Casciaro',
                '‚ÄúLearning React‚Äù by Alex Banks and Eve Porcello'
            ],
            'papers': [
                '‚ÄúReal-Time Web Applications with WebSockets‚Äù by Wang et al.',
                '‚ÄúScaling Real-Time Applications‚Äù by Rossen Stoyanchev'
            ]
        }
    }
}

def get_expert_recommendation(domain, project):
    data = library_expert_knowledge.get(domain, {}).get(project)
    if not data:
        return f"ü§ñ Sorry, I don‚Äôt have expert advice for {project} in {domain}."
    return f"ü§ñ Here's my expert recommendation for {project} in {domain}:\n{data['recommendation']}"

def suggest_books(domain, project):
    data = library_expert_knowledge.get(domain, {}).get(project, {})
    books = data.get('books', [])
    if books:
        return f"üìö Based on your project, I suggest the following books:\n- " + "\n- ".join(books)
    else:
        return "ü§ñ I don‚Äôt have any book suggestions for this project."

def suggest_papers(domain, project):
    data = library_expert_knowledge.get(domain, {}).get(project, {})
    papers = data.get('papers', [])
    if papers:
        return f"üìÑ Here are some research papers related to your project:\n- " + "\n- ".join(papers)
    else:
        return "ü§ñ I don‚Äôt have any paper suggestions for this project."

def main():
    print("ü§ñ Welcome to the Interactive Library Expert System!")
    print("Available domains: AI, Web Development")
    while True:
        domain = input("\nüë§ You: Which domain is your project in? (AI/Web Development) or type 'exit' to quit: ").strip()
        if domain.lower() == 'exit':
            print("üëã Thanks for using the expert system. Best of luck with your project!")
            break

        if domain not in library_expert_knowledge:
            print("ü§ñ Expert: Sorry, I only know AI and Web Development for now.")
            continue

        projects = list(library_expert_knowledge[domain].keys())
        print(f"ü§ñ Expert: What is your project about? Options: {', '.join(projects)}")
        project = input("üë§ You: ").strip()

        recommendation = get_expert_recommendation(domain, project)
        print(f"\n{recommendation}")

        while True:
            more_help = input("\nü§ñ Expert: How can I assist you further? You can say 'suggest books', 'give me some research papers names', or 'no more assistance'.\nüë§ You: ").strip().lower()

            if "suggest books" in more_help or "book" in more_help:
                books = suggest_books(domain, project)
                print(f"\n{books}")
            elif "research papers" in more_help or "papers" in more_help:
                papers = suggest_papers(domain, project)
                print(f"\n{papers}")
            elif "no more assistance" in more_help or "none" in more_help:
                print("‚úÖ Expert: Alright! Let me know if you need anything else.")
                break
            else:
                print("ü§ñ Expert: Please ask for specific help, such as 'suggest books', 'give me research papers', or 'no more assistance'.")

if __name__ == "__main__":
    main()











##### society 

class SocietyMaintenanceExpertSystem:
    def __init__(self):
        # Define some initial facts about the society maintenance
        self.facts = {
            "water_supply_on_monday": False,  # Initially, no water on Monday
            "lights_in_common_passage_on_monday": False,  # Initially, no lights in the common passage
            "scheduled_maintenance_water_monday": True,
            "scheduled_power_cut_monday": True,
            "fault_in_water_pipeline": False,
            "fault_in_electrical_panel": False,
            "upcoming_water_supply_schedule": "Next water supply is on Wednesday at 8 AM",
            "upcoming_power_cut_schedule": "Next power cut is on Friday from 2 PM to 4 PM",
            "water_pressure_issue_building_x": True,
            "electricity_issue_building_x": True,
        }

    def ask_question(self, question):
        """Main method to interact with the user and provide responses"""
        question = question.lower()

        if "no water supply" in question or "water supply issue" in question:
            return self.check_water_supply(question)

        elif "no lights" in question or "lights out" in question:
            return self.check_lights_in_common_passage(question)

        elif "water pressure" in question:
            return self.check_water_pressure()

        elif "electricity issue" in question:
            return self.check_electricity_issue()

        elif "maintenance" in question or "repair" in question:
            return self.check_scheduled_maintenance()

        elif "fault" in question:
            return self.report_fault(question)

        else:
            return self.contact_society_chairperson()

    def check_water_supply(self, question):
        """Checks if there is an issue with water supply and provides an answer"""
        if "monday" in question:
            if self.facts["scheduled_maintenance_water_monday"]:
                return "Expert Opinion: There was no water supply on Monday due to scheduled maintenance on the water pipeline."
            elif self.facts["fault_in_water_pipeline"]:
                return "Expert Opinion: There was no water supply on Monday due to a fault in the water pipeline."
            else:
                return "Expert Opinion: There was no water supply on Monday due to unknown reasons. Please contact the society chairman for more details."
        else:
            return "Expert Opinion: For further water-related issues, you can contact the society chairman at +91-123-456-7890."

    def check_lights_in_common_passage(self, question):
        """Checks if there is an issue with the lights and provides an answer"""
        if "common passage" in question:
            if self.facts["scheduled_power_cut_monday"]:
                return "Expert Opinion: The lights in the common passage were out due to a scheduled power cut for maintenance on Monday."
            elif self.facts["fault_in_electrical_panel"]:
                return "Expert Opinion: There were no lights in the common passage due to a fault in the electrical distribution panel."
            else:
                return "Expert Opinion: There were no lights in the common passage due to unknown reasons. Please contact the society chairman for more details."
        else:
            return "Expert Opinion: For further electricity-related issues, you can contact the society chairman at +91-123-456-7890."

    def check_water_pressure(self):
        """Checks if there is an issue with water pressure in building X"""
        if self.facts["water_pressure_issue_building_x"]:
            return "Expert Opinion: There is low water pressure in building X. This could be due to a fault in the water pipeline or an issue with the pump. We suggest scheduling a maintenance check."
        else:
            return "Expert Opinion: Water pressure is normal in all buildings."

    def check_electricity_issue(self):
        """Checks if there is an electricity issue in building X"""
        if self.facts["electricity_issue_building_x"]:
            return "Expert Opinion: There is an electricity issue in building X. Please check with the building's electrical panel for any faults."
        else:
            return "Expert Opinion: Electricity is working fine in all buildings."

    def check_scheduled_maintenance(self):
        """Provides information on scheduled maintenance"""
        return f"Expert Opinion: The next scheduled maintenance for water supply is on Wednesday at 8 AM. The next power cut is on Friday from 2 PM to 4 PM."

    def report_fault(self, question):
        """If the user wants to report a fault, provide them with contact details"""
        return "Expert Opinion: To report a fault, please contact the society maintenance team at +91-987-654-3210."

    def contact_society_chairperson(self):
        """If the system can't provide an answer, escalate the issue"""
        return "Expert Opinion: I couldn't find an answer to your question. Please contact the society chairperson at +91-123-456-7890 for further assistance."

# Initialize the expert system
expert_system = SocietyMaintenanceExpertSystem()

# Example interaction loop
def interact_with_system():
    print("ü§ñ Welcome to the Society Maintenance Expert System! Feel free to ask questions.")
    while True:
        user_input = input("\nüë§ You: ")
        if user_input.lower() == "exit":
            print("‚úÖ Expert: Goodbye!")
            break
        response = expert_system.ask_question(user_input)
        print(f"ü§ñ {response}")

# Start interaction
interact_with_system()


# PS E:\mock> python -u "e:\mock\society.py"
# ü§ñ Welcome to the Society Maintenance Expert System! Feel free to ask questions.

# üë§ You: why was there no water supply on Monday
# ü§ñ Expert Opinion: There was no water supply on Monday due to scheduled maintenance on the water pipeline.

# üë§ You: why was there no water supply on monday 
# ü§ñ Expert Opinion: There was no water supply on Monday due to scheduled maintenance on the water pipeline.

# üë§ You: Why were the lights out in the common passage?
# ü§ñ Expert Opinion: The lights in the common passage were out due to a scheduled power cut for maintenance on Monday.

# üë§ You: When is the next scheduled maintenance?
# ü§ñ Expert Opinion: The next scheduled maintenance for water supply is on Wednesday at 8 AM. The next power cut is on Friday from 2 PM to 4 PM.

# üë§ You: There is low water pressure in building X.
# ü§ñ Expert Opinion: There is low water pressure in building X. This could be due to a fault in the water pipeline or an issue with the pump. We suggest scheduling a maintenance check.

# üë§ You: why was today a power cut?
# ü§ñ Expert Opinion: I couldn't find an answer to your question. Please contact the society chairperson at +91-123-456-7890 for further assistance.

# üë§ You:
