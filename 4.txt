// n queen - with steps commented
#include <iostream>
#include <vector>
using namespace std;

int totalBacktracking = 0;
int totalBranchAndBound = 0;

// Print 2D board
void printBoard(vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row)
            cout << cell << " ";
        cout << endl;
    }
    cout << endl;
}

// -------- BACKTRACKING (Row-wise) --------
bool isSafeBacktrack(vector<vector<char>>& board, int row, int col, int n) {
    for (int i = 0; i < row; i++)
        if (board[i][col] == 'Q') return false;

    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 'Q') return false;

    for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++)
        if (board[i][j] == 'Q') return false;

    return true;
}

void solveBacktracking(vector<vector<char>>& board, int row, int n) {
    if (row == n) {
        totalBacktracking++;
        // cout << "=== Solution " << totalBacktracking << " ===\n"; // added: mark solution
        printBoard(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafeBacktrack(board, row, col, n)) {
            board[row][col] = 'Q';

            // Added: print after placing a queen
            // cout << "Placed Q at (" << row << ", " << col << ")\n";
            // printBoard(board);

            solveBacktracking(board, row + 1, n);

            board[row][col] = '.';

            // Added: print after removing a queen
            // cout << "Removed Q from (" << row << ", " << col << ")\n";
            // printBoard(board);
        }
    }
}

// -------- BRANCH AND BOUND (Row-wise) --------
void solveBranchAndBound(vector<vector<char>>& board, vector<bool>& cols, vector<bool>& diag1, vector<bool>& diag2, int row, int n) {
    if (row == n) {
        totalBranchAndBound++;
        // cout << "=== Solution " << totalBranchAndBound << " ===\n"; // added: mark solution
        printBoard(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (!cols[col] && !diag1[row + col] && !diag2[row - col + n - 1]) {
            board[row][col] = 'Q';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = true;

            // Added: print after placing a queen
            // cout << "Placed Q at (" << row << ", " << col << ")\n";
            // printBoard(board);

            solveBranchAndBound(board, cols, diag1, diag2, row + 1, n);

            board[row][col] = '.';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = false;

            // Added: print after removing a queen
        //     cout << "Removed Q from (" << row << ", " << col << ")\n";
        //     printBoard(board);
        }
    }
}

// -------- MENU-DRIVEN MAIN FUNCTION --------
int main() {
    int choice, n;

    do {
        cout << "\n======= N-Queens Menu =======\n";
        cout << "1. Solve using Backtracking\n";
        cout << "2. Solve using Branch and Bound\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1 || choice == 2) {
            cout << "Enter value of N for N-Queens: ";
            cin >> n;
            vector<vector<char>> board(n, vector<char>(n, '.'));

            if (choice == 1) {
                totalBacktracking = 0;
                cout << "\n--- Solving using Backtracking (Row-wise) ---\n";
                solveBacktracking(board, 0, n);
                cout << "Total Solutions (Backtracking): " << totalBacktracking << "\n";
            }
            else if (choice == 2) {
                totalBranchAndBound = 0;
                vector<bool> cols(n, false), diag1(2 * n - 1, false), diag2(2 * n - 1, false);
                cout << "\n--- Solving using Branch and Bound (Row-wise) ---\n";
                solveBranchAndBound(board, cols, diag1, diag2, 0, n);
                cout << "Total Solutions (Branch and Bound): " << totalBranchAndBound << "\n";
            }
        }
        else if (choice == 3) {
            cout << "Exiting program.\n";
        }
        else {
            cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 3);

    return 0;
}












###### graph coloring 

#include <iostream>
#include <stack>
#include <vector>
#include <map>
using namespace std;

class GraphColor
{
public:
    vector<vector<int>> create(int V)
    {
        vector<vector<int>> graph(V, vector<int>(V, 0));
        cout << "\nEnter 1 if edge present else enter 0:" << endl;
        for (int i = 0; i < V; i++)
        {
            for (int j = i + 1; j < V; j++)
            {
                int a;
                cout << "\nEnter for edge between vertex " << i << " and " << j << ": ";
                cin >> a;
                graph[i][j] = a;
                graph[j][i] = a;
            }
        }
        return graph;
    }

    void display(vector<vector<int>> graph, int V)
    {
        cout << "\n----------Graph-----------" << endl;
        for (int i = 0; i < V; i++)
        {
            for (int j = 0; j < V; j++)
            {
                cout << graph[i][j] << "\t";
            }
            cout << endl;
        }
    }

    map<int, string> setColor(int m)
    {
        map<int, string> VColor;
        for (int i = 1; i <= m; i++)
        {
            string shade;
            cout << "\nEnter colour shade for " << i << ": ";
            cin >> shade;
            VColor[i] = shade;
        }
        return VColor;
    }

    bool isSafe(int v, vector<vector<int>> &graph, int color[], int c, int V)
    {
        for (int i = 0; i < V; i++)
        {
            if (graph[v][i] && c == color[i])
            {
                return false;
            }
        }
        return true;
    }

    // -------- BACKTRACKING ----------
    bool gColorBacktracking(vector<vector<int>> &graph, int m, int color[], int v, int V)
    {
        if (v == V)
        {
            return true;
        }
        for (int c = 1; c <= m; c++)
        {
            if (isSafe(v, graph, color, c, V))
            {
                color[v] = c;
                if (gColorBacktracking(graph, m, color, v + 1, V))
                {
                    return true;
                }
                color[v] = 0;
            }
        }
        return false;
    }

    // -------- BRANCH AND BOUND ----------
    bool gColorBranchBound(vector<vector<int>> &graph, int m, int color[], int v, int V)
    {
        stack<int> S;
        S.push(v);
        while (!S.empty())
        {
            int u = S.top();
            S.pop();

            bool assigned = false;
            for (int c = 1; c <= m; c++)
            {
                if (isSafe(u, graph, color, c, V))
                {
                    color[u] = c;
                    assigned = true;
                    break;
                }
            }

            if (!assigned)
            {
                return false; // prune branch
            }

            for (int i = 0; i < V; i++)
            {
                if (color[i] == 0 && graph[u][i])
                {
                    S.push(i);
                }
            }
        }
        // Check if all vertices are colored
        for (int i = 0; i < V; i++)
        {
            if (color[i] == 0)
                return false;
        }
        return true;
    }

    void printColor(map<int, string> ColorVertex, int color[], int V)
    {
        for (int i = 0; i < V; i++)
        {
            if (color[i] != 0)
            {
                cout << "Vertex: " << i << " ---> Colour: " << ColorVertex[color[i]] << endl;
            }
            else
            {
                cout << "Vertex: " << i << " ---> Colour: No Colour" << endl;
            }
        }
    }
};

int main()
{
    int V;
    cout << "Enter number of vertices: ";
    cin >> V;
    GraphColor gc;
    vector<vector<int>> graph = gc.create(V);
    gc.display(graph, V);
    int m;
    cout << "Enter number of colours available: ";
    cin >> m;
    map<int, string> ColorVertex = gc.setColor(m);

    while (true)
    {
        cout << "\n====== MENU ======" << endl;
        cout << "1. Branch and Bound" << endl;
        cout << "2. Backtracking" << endl;
        cout << "3. Exit" << endl;
        cout << "Enter your choice: ";
        int choice;
        cin >> choice;

        if (choice == 3)
        {
            cout << "Exiting program." << endl;
            break;
        }

        int color[V] = {0};
        int v;
        cout << "\nEnter starting vertex: ";
        cin >> v;
        bool result = false;

        switch (choice)
        {
        case 1:
            result = gc.gColorBranchBound(graph, m, color, v, V);
            break;
        case 2:
            result = gc.gColorBacktracking(graph, m, color, v, V);
            break;
        default:
            cout << "Invalid choice! Try again." << endl;
            continue;
        }

        gc.printColor(ColorVertex, color, V);
        if (result)
        {
            cout << "\nGraph coloring possible!" << endl;
        }
        else
        {
            cout << "\nGraph coloring not possible!" << endl;
        }
    }

    return 0;
}



  
