// n queen - with steps commented
#include <iostream>
#include <vector>
using namespace std;

int totalBacktracking = 0;
int totalBranchAndBound = 0;

// Print 2D board
void printBoard(vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row)
            cout << cell << " ";
        cout << endl;
    }
    cout << endl;
}

// -------- BACKTRACKING (Row-wise) --------
bool isSafeBacktrack(vector<vector<char>>& board, int row, int col, int n) {
    for (int i = 0; i < row; i++)
        if (board[i][col] == 'Q') return false;

    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 'Q') return false;

    for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++)
        if (board[i][j] == 'Q') return false;

    return true;
}

void solveBacktracking(vector<vector<char>>& board, int row, int n) {
    if (row == n) {
        totalBacktracking++;
        // cout << "=== Solution " << totalBacktracking << " ===\n"; // added: mark solution
        printBoard(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafeBacktrack(board, row, col, n)) {
            board[row][col] = 'Q';

            // Added: print after placing a queen
            // cout << "Placed Q at (" << row << ", " << col << ")\n";
            // printBoard(board);

            solveBacktracking(board, row + 1, n);

            board[row][col] = '.';

            // Added: print after removing a queen
            // cout << "Removed Q from (" << row << ", " << col << ")\n";
            // printBoard(board);
        }
    }
}

// -------- BRANCH AND BOUND (Row-wise) --------
void solveBranchAndBound(vector<vector<char>>& board, vector<bool>& cols, vector<bool>& diag1, vector<bool>& diag2, int row, int n) {
    if (row == n) {
        totalBranchAndBound++;
        // cout << "=== Solution " << totalBranchAndBound << " ===\n"; // added: mark solution
        printBoard(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (!cols[col] && !diag1[row + col] && !diag2[row - col + n - 1]) {
            board[row][col] = 'Q';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = true;

            // Added: print after placing a queen
            // cout << "Placed Q at (" << row << ", " << col << ")\n";
            // printBoard(board);

            solveBranchAndBound(board, cols, diag1, diag2, row + 1, n);

            board[row][col] = '.';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = false;

            // Added: print after removing a queen
        //     cout << "Removed Q from (" << row << ", " << col << ")\n";
        //     printBoard(board);
        }
    }
}

// -------- MENU-DRIVEN MAIN FUNCTION --------
int main() {
    int choice, n;

    do {
        cout << "\n======= N-Queens Menu =======\n";
        cout << "1. Solve using Backtracking\n";
        cout << "2. Solve using Branch and Bound\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1 || choice == 2) {
            cout << "Enter value of N for N-Queens: ";
            cin >> n;
            vector<vector<char>> board(n, vector<char>(n, '.'));

            if (choice == 1) {
                totalBacktracking = 0;
                cout << "\n--- Solving using Backtracking (Row-wise) ---\n";
                solveBacktracking(board, 0, n);
                cout << "Total Solutions (Backtracking): " << totalBacktracking << "\n";
            }
            else if (choice == 2) {
                totalBranchAndBound = 0;
                vector<bool> cols(n, false), diag1(2 * n - 1, false), diag2(2 * n - 1, false);
                cout << "\n--- Solving using Branch and Bound (Row-wise) ---\n";
                solveBranchAndBound(board, cols, diag1, diag2, 0, n);
                cout << "Total Solutions (Branch and Bound): " << totalBranchAndBound << "\n";
            }
        }
        else if (choice == 3) {
            cout << "Exiting program.\n";
        }
        else {
            cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 3);

    return 0;
}