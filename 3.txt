#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// ---------- PRIM'S MST ----------
const int INF = 1e9;

void primMST(int V, vector<vector<int>> &graph) {
    vector<int> key(V, INF);
    vector<bool> mstSet(V, false);
    vector<int> parent(V, -1);
    key[0] = 0;
    int totalCost = 0;

    for (int count = 0; count < V; count++) {
        int u = -1, minKey = INF;
        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < minKey) {
                minKey = key[v];
                u = v;
            }
        }

        if (u == -1) break; // all reachable nodes processed
        mstSet[u] = true;

        // Add cost only if it's not the starting node
        if (parent[u] != -1) {
            totalCost += graph[u][parent[u]];
        }

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    cout << "Prim's MST edges:\n";
    for (int i = 1; i < V; i++) {
        cout << parent[i] << " - " << i << " : " << graph[i][parent[i]] << "\n";
    }
    cout << "Total Cost of Prim's MST: " << totalCost << "\n";
}

// ---------- JOB SCHEDULING ----------
struct Job {
    int id, deadline, profit;
};

bool compareJobs(Job a, Job b) {
    return a.profit > b.profit;
}

void jobScheduling(vector<Job> &jobs) {
    sort(jobs.begin(), jobs.end(), compareJobs);
    int n = jobs.size();
    vector<int> slot(n, -1);
    int totalProfit = 0;

    for (auto job : jobs) {
        for (int j = min(n - 1, job.deadline - 1); j >= 0; j--) {
            if (slot[j] == -1) {
                slot[j] = job.id;
                totalProfit += job.profit;
                break;
            }
        }
    }

    cout << "Jobs scheduled (by ID): ";
    for (int i = 0; i < n; i++)
        if (slot[i] != -1)
            cout << slot[i] << " ";
    cout << "\nTotal Profit: " << totalProfit << "\n";
}

// ---------- KRUSKAL'S MST ----------
struct Edge {
    int u, v, weight;
};

bool compareEdge(Edge a, Edge b) {
    return a.weight < b.weight;
}

int findParent(int u, vector<int> &parent) {
    if (u != parent[u])
        parent[u] = findParent(parent[u], parent);
    return parent[u];
}

void unionSet(int u, int v, vector<int> &parent, vector<int> &rank) {
    int pu = findParent(u, parent);
    int pv = findParent(v, parent);
    if (pu != pv) {
        if (rank[pu] < rank[pv])
            parent[pu] = pv;
        else if (rank[pu] > rank[pv])
            parent[pv] = pu;
        else {
            parent[pv] = pu;
            rank[pu]++;
        }
    }
}

void kruskalMST(int V, vector<Edge> &edges) {
    sort(edges.begin(), edges.end(), compareEdge);
    vector<int> parent(V), rank(V, 0);
    for (int i = 0; i < V; i++)
        parent[i] = i;
    
    int totalCost = 0;

    cout << "Kruskal's MST edges:\n";
    for (Edge e : edges) {
        if (findParent(e.u, parent) != findParent(e.v, parent)) {
            cout << e.u << " - " << e.v << " : " << e.weight << "\n";
            totalCost += e.weight;
            unionSet(e.u, e.v, parent, rank);
        }
    }

    cout << "Total Cost of Kruskal's MST: " << totalCost << "\n";
}

// ---------- SELECTION SORT ----------
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }

    cout << "Sorted array using Selection Sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
}

// ---------- MAIN MENU ----------
int main() {
    int choice;
    do {
        cout << "\n------ MENU ------\n";
        cout << "1. Prim's MST\n";
        cout << "2. Job Scheduling\n";
        cout << "3. Kruskal's MST\n";
        cout << "4. Selection Sort\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            int V;
            cout << "Enter number of vertices: ";
            cin >> V;
            vector<vector<int>> graph(V, vector<int>(V));
            cout << "Enter the adjacency matrix:\n";
            for (int i = 0; i < V; i++)
                for (int j = 0; j < V; j++)
                    cin >> graph[i][j];
            primMST(V, graph);
        }
        else if (choice == 2) {
            int n;
            cout << "Enter number of jobs: ";
            cin >> n;
            vector<Job> jobs(n);
            for (int i = 0; i < n; i++) {
                cout << "Enter Job ID, Deadline, Profit: ";
                cin >> jobs[i].id >> jobs[i].deadline >> jobs[i].profit;
            }
            jobScheduling(jobs);
        }
        else if (choice == 3) {
            int V, E;
            cout << "Enter number of vertices and edges: ";
            cin >> V >> E;
            vector<Edge> edges(E);
            for (int i = 0; i < E; i++) {
                cout << "Enter edge (u v weight): ";
                cin >> edges[i].u >> edges[i].v >> edges[i].weight;
            }
            kruskalMST(V, edges);
        }
        else if (choice == 4) {
            int n;
            cout << "Enter number of elements for sorting: ";
            cin >> n;
            vector<int> arr(n);
            cout << "Enter elements:\n";
            for (int i = 0; i < n; i++) {
                cin >> arr[i];
            }
            selectionSort(arr);
        }
        else if (choice == 5) {
            cout << "Exiting...\n";
        }
        else {
            cout << "Invalid choice.\n";
        }

    } while (choice != 5);

    return 0;
}
