#include <iostream>
#include <vector>
#include <queue>
#include <stack>
using namespace std;

class Graph {
private:
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    void DFS(int v, vector<bool>& visited) {
        visited[v] = true;
        cout << v << " ";
        for(int neighbor : adj[v]) {
            if(!visited[neighbor]) {
                DFS(neighbor, visited);
            }
        }
    }

    void BFSRecursiveUtil(queue<int>& q, vector<bool>& visited) {
        if(q.empty()) return;

        int curr = q.front();
        q.pop();
        cout << curr << " ";

        for(int neighbor : adj[curr]) {
            if(!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }

        BFSRecursiveUtil(q, visited);
    }

    void BFS(int start, vector<bool>& visited) {
        queue<int> q;
        visited[start] = true;
        q.push(start);
        BFSRecursiveUtil(q, visited);
    }

    void DFSIterative(int start) {
        vector<bool> visited(V, false);
        stack<int> s;
        s.push(start);

        while(!s.empty()) {
            int vertex = s.top();
            s.pop();

            if(!visited[vertex]) {
                cout << vertex << " ";
                visited[vertex] = true;
            }

            for(int neighbor : adj[vertex]) {
                if(!visited[neighbor]) {
                    s.push(neighbor);
                }
            }
        }
    }

    void BFSIterative(int start) {
        vector<bool> visited(V, false);
        queue<int> q;
        q.push(start);
        visited[start] = true;

        while(!q.empty()) {
            int vertex = q.front();
            q.pop();
            cout << vertex << " ";
            for(auto neighbor : adj[vertex]) {
                if(!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
    }
};

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    Graph g(V);
    cout << "Enter edges (u v):\n";
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }

    int choice, start;
    while(true) {
        cout << "\n--- MENU ---\n";
        cout << "1. DFS (Recursive)\n";
        cout << "2. BFS (Recursive)\n";
        cout << "3. DFS (Iterative)\n";
        cout << "4. BFS (Iterative)\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if(choice == 5) break;

        cout << "Enter starting vertex: ";
        cin >> start;

        switch(choice) {
            case 1: {
                vector<bool> visitedDFS(V, false);
                cout << "DFS Recursive starting from vertex " << start << ":\n";
                g.DFS(start, visitedDFS);
                cout << endl;
                break;
            }
            case 2: {
                vector<bool> visitedBFS(V, false);
                cout << "BFS Recursive starting from vertex " << start << ":\n";
                g.BFS(start, visitedBFS);
                cout << endl;
                break;
            }
            case 3:
                cout << "DFS Iterative starting from vertex " << start << ":\n";
                g.DFSIterative(start);
                cout << endl;
                break;
            case 4:
                cout << "BFS Iterative starting from vertex " << start << ":\n";
                g.BFSIterative(start);
                cout << endl;
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    }

    cout << "Exiting program.\n";
    return 0;
}



























########## level wise code

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
using namespace std;

class Graph {
private:
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    void DFS(int v, vector<bool>& visited, int depth) {
        visited[v] = true;
        cout << "Node: " << v << ", Level: " << depth << endl;
        for (int neighbor : adj[v]) {
            if (!visited[neighbor]) {
                DFS(neighbor, visited, depth + 1);
            }
        }
    }

    void BFSIterativeWithLevels(int start) {
        vector<bool> visited(V, false);
        queue<pair<int, int>> q; // pair<node, level>
        visited[start] = true;
        q.push({start, 0});

        while (!q.empty()) {
            int vertex = q.front().first;
            int level = q.front().second;
            q.pop();

            cout << "Node: " << vertex << ", Level: " << level << endl;

            for (auto neighbor : adj[vertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push({neighbor, level + 1});
                }
            }
        }
    }

    void DFSIterativeWithLevels(int start) {
        vector<bool> visited(V, false);
        stack<pair<int, int>> s; // pair<node, level>
        s.push({start, 0});

        while (!s.empty()) {
            int vertex = s.top().first;
            int level = s.top().second;
            s.pop();

            if (!visited[vertex]) {
                visited[vertex] = true;
                cout << "Node: " << vertex << ", Level: " << level << endl;

                for (auto neighbor : adj[vertex]) {
                    if (!visited[neighbor]) {
                        s.push({neighbor, level + 1});
                    }
                }
            }
        }
    }

    // Optional: Recursive BFS with levels (advanced; usually avoid in viva)
    void BFSRecursiveUtil(queue<pair<int, int>>& q, vector<bool>& visited) {
        if (q.empty()) return;

        int curr = q.front().first;
        int level = q.front().second;
        q.pop();

        cout << "Node: " << curr << ", Level: " << level << endl;

        for (int neighbor : adj[curr]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push({neighbor, level + 1});
            }
        }

        BFSRecursiveUtil(q, visited);
    }

    void BFSRecursiveWithLevels(int start) {
        vector<bool> visited(V, false);
        queue<pair<int, int>> q;
        visited[start] = true;
        q.push({start, 0});
        BFSRecursiveUtil(q, visited);
    }
};

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    Graph g(V);
    cout << "Enter edges (u v):\n";
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }

    int choice, start;
    while (true) {
        cout << "\n--- MENU ---\n";
        cout << "1. DFS (Recursive with Levels)\n";
        cout << "2. BFS (Recursive with Levels)\n";
        cout << "3. DFS (Iterative with Levels)\n";
        cout << "4. BFS (Iterative with Levels)\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 5) break;

        cout << "Enter starting vertex: ";
        cin >> start;

        switch (choice) {
            case 1: {
                vector<bool> visitedDFS(V, false);
                cout << "DFS Recursive (with levels) starting from vertex " << start << ":\n";
                g.DFS(start, visitedDFS, 0);
                cout << endl;
                break;
            }
            case 2: {
                cout << "BFS Recursive (with levels) starting from vertex " << start << ":\n";
                g.BFSRecursiveWithLevels(start);
                cout << endl;
                break;
            }
            case 3:
                cout << "DFS Iterative (with levels) starting from vertex " << start << ":\n";
                g.DFSIterativeWithLevels(start);
                cout << endl;
                break;
            case 4:
                cout << "BFS Iterative (with levels) starting from vertex " << start << ":\n";
                g.BFSIterativeWithLevels(start);
                cout << endl;
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    }

    cout << "Exiting program.\n";
    return 0;
}
