#include <bits/stdc++.h>
using namespace std;

#define N 3

int drow[] = {1, 0, -1, 0};  // Directions for moving in the matrix (down, left, up, right)
int dcol[] = {0, -1, 0, 1};

// Node structure to represent each state of the puzzle
struct Node {
    Node *parent;
    int mat[N][N];  // Matrix representing the state
    int g;  // Cost to reach this node (path cost)
    int h;  // Heuristic cost (estimated cost to goal)
    int x, y;  // Coordinates of the empty space (0) in the matrix
};

// Convert the matrix to a string for easy comparison and storage in the closed list
string matrixToString(int mat[N][N]) {
    string str = "";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            str += to_string(mat[i][j]) + " ";
        }
    }
    return str;
}

// Print the current state of the matrix
void printMatrix(int mat[N][N], int g, int h) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
    cout << "g: " << g << " "
         << "h: " << h << " "
         << "f: " << g + h << endl;
}

// Create a new node based on the movement of the empty space (0) in the matrix
Node *newNode(int mat[N][N], int x, int y, int nx, int ny, int g, Node *parent) {
    Node *node = new Node;
    node->parent = parent;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            node->mat[i][j] = mat[i][j];
        }
    }
    swap(node->mat[x][y], node->mat[nx][ny]);  // Swap empty space with the new position
    node->h = INT_MAX;
    node->g = g;
    node->x = nx;
    node->y = ny;
    return node;
}

// Calculate the heuristic (Manhattan distance) between the current state and the goal state
int heuristic(int initial[N][N], int final[N][N]) {
    int count = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (initial[i][j] && initial[i][j] != final[i][j]) {
                count++;  // Count how many tiles are not in the correct position
            }
        }
    }
    return count;
}

// Check if a given cell is within the bounds of the matrix
bool isSafe(int x, int y) {
    return (x >= 0 && x < N && y >= 0 && y < N);
}

// Print the path from the start state to the goal state
void printPath(Node *root) {
    if (root == NULL)
        return;
    printPath(root->parent);
    printMatrix(root->mat, root->g, root->h);
    cout << endl;
}

// Comparator to order nodes in the priority queue based on f = g + h
struct comp {
    bool operator()(const Node *lhs, const Node *rhs) const {
        return (lhs->h + lhs->g) > (rhs->h + rhs->g);  // Compare based on f = g + h
    }
};

// Main A* solving function
void solve(int start[N][N], int x, int y, int goal[N][N]) {
    int cnt = 0;
    priority_queue<Node *, vector<Node *>, comp> openList;  // Open list (priority queue)
    unordered_set<string> closedList;  // Closed list (set)

    Node *root = newNode(start, x, y, x, y, 0, NULL);
    root->h = heuristic(start, goal);
    openList.push(root);  // Add the initial state to the open list

    while (!openList.empty()) {
        Node *m = openList.top();
        openList.pop();

        // Convert current matrix state to string for easy comparison
        string currentState = matrixToString(m->mat);

        // If the state is already in the closed list, skip it
        if (closedList.find(currentState) != closedList.end()) {
            continue;  // Skip this node if it's already been explored
        }

        // Add the current state to the closed list (we've now explored it)
        closedList.insert(currentState);

        // If we've reached the goal state (heuristic value is 0)
        if (m->h == 0) {
            cout << "\n\nThis puzzle is solved in " << cnt << " moves \n";
            printPath(m);  // Print the solution path
            return;
        }

        cnt++;

        // Explore the neighbors of the current node (up, down, left, right)
        for (int i = 0; i < 4; i++) {
            int dx = m->x + drow[i];
            int dy = m->y + dcol[i];

            // If the new position is within the bounds of the matrix
            if (isSafe(dx, dy)) {
                Node *child = newNode(m->mat, m->x, m->y, dx, dy, m->g + 1, m);
                child->h = heuristic(child->mat, goal);

                // Convert the child's state to a string and check if it's in the closed list
                string childState = matrixToString(child->mat);
                if (closedList.find(childState) == closedList.end()) {
                    openList.push(child);  // Push the child node to the open list if not in the closed list
                }
            }
        }
    }
}

// Main function to read input and solve the puzzle
int main() {
    int start[N][N], goal[N][N];
    int x, y;
    char choice;

    do {
        x = -1;
        y = -1;
        cout << "Enter the start state (use 0 for blank): " << endl;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cin >> start[i][j];
                if (start[i][j] == 0) {
                    x = i;  // Save the position of the blank space (0)
                    y = j;
                }
            }
        }

        cout << endl << "Enter the goal state: " << endl;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cin >> goal[i][j];  // Read the goal state
            }
        }

        solve(start, x, y, goal);  // Solve the puzzle using A*

        cout << "\nDo you want to solve another puzzle? (y/n): ";
        cin >> choice;
        cout << endl;

    } while (choice == 'y' || choice == 'Y');

    cout << "Exiting program.\n";
    return 0;
}
